// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Msg.proto

#include "Msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Msg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_transaction_msg_t_Msg_2eproto;
class transaction_msg_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<transaction_msg_t> _instance;
} _transaction_msg_t_default_instance_;
class application_msg_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<application_msg_t> _instance;
} _application_msg_t_default_instance_;
static void InitDefaultsscc_info_application_msg_t_Msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_application_msg_t_default_instance_;
    new (ptr) ::application_msg_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::application_msg_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_application_msg_t_Msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_application_msg_t_Msg_2eproto}, {
      &scc_info_transaction_msg_t_Msg_2eproto.base,}};

static void InitDefaultsscc_info_transaction_msg_t_Msg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_transaction_msg_t_default_instance_;
    new (ptr) ::transaction_msg_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transaction_msg_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_transaction_msg_t_Msg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_transaction_msg_t_Msg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Msg_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Msg_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Msg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Msg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::transaction_msg_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transaction_msg_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transaction_msg_t, sender_id_),
  PROTOBUF_FIELD_OFFSET(::transaction_msg_t, recver_id_),
  PROTOBUF_FIELD_OFFSET(::transaction_msg_t, amt_),
  PROTOBUF_FIELD_OFFSET(::transaction_msg_t, clock_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::application_msg_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::application_msg_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::application_msg_t, sender_id_),
  PROTOBUF_FIELD_OFFSET(::application_msg_t, timetable_str_),
  PROTOBUF_FIELD_OFFSET(::application_msg_t, log_),
  1,
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::transaction_msg_t)},
  { 13, 21, sizeof(::application_msg_t)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_transaction_msg_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_application_msg_t_default_instance_),
};

const char descriptor_table_protodef_Msg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tMsg.proto\"U\n\021transaction_msg_t\022\021\n\tsend"
  "er_id\030\001 \002(\r\022\021\n\trecver_id\030\002 \002(\r\022\013\n\003amt\030\003 "
  "\002(\002\022\r\n\005clock\030\004 \002(\r\"^\n\021application_msg_t\022"
  "\021\n\tsender_id\030\001 \002(\005\022\025\n\rtimetable_str\030\002 \002("
  "\t\022\037\n\003log\030\003 \003(\0132\022.transaction_msg_t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Msg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Msg_2eproto_sccs[2] = {
  &scc_info_application_msg_t_Msg_2eproto.base,
  &scc_info_transaction_msg_t_Msg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Msg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Msg_2eproto = {
  false, false, descriptor_table_protodef_Msg_2eproto, "Msg.proto", 194,
  &descriptor_table_Msg_2eproto_once, descriptor_table_Msg_2eproto_sccs, descriptor_table_Msg_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_Msg_2eproto::offsets,
  file_level_metadata_Msg_2eproto, 2, file_level_enum_descriptors_Msg_2eproto, file_level_service_descriptors_Msg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Msg_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Msg_2eproto)), true);

// ===================================================================

void transaction_msg_t::InitAsDefaultInstance() {
}
class transaction_msg_t::_Internal {
 public:
  using HasBits = decltype(std::declval<transaction_msg_t>()._has_bits_);
  static void set_has_sender_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_recver_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_amt(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_clock(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

transaction_msg_t::transaction_msg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:transaction_msg_t)
}
transaction_msg_t::transaction_msg_t(const transaction_msg_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sender_id_, &from.sender_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&clock_) -
    reinterpret_cast<char*>(&sender_id_)) + sizeof(clock_));
  // @@protoc_insertion_point(copy_constructor:transaction_msg_t)
}

void transaction_msg_t::SharedCtor() {
  ::memset(&sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clock_) -
      reinterpret_cast<char*>(&sender_id_)) + sizeof(clock_));
}

transaction_msg_t::~transaction_msg_t() {
  // @@protoc_insertion_point(destructor:transaction_msg_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void transaction_msg_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void transaction_msg_t::ArenaDtor(void* object) {
  transaction_msg_t* _this = reinterpret_cast< transaction_msg_t* >(object);
  (void)_this;
}
void transaction_msg_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transaction_msg_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const transaction_msg_t& transaction_msg_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_transaction_msg_t_Msg_2eproto.base);
  return *internal_default_instance();
}


void transaction_msg_t::Clear() {
// @@protoc_insertion_point(message_clear_start:transaction_msg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&sender_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clock_) -
        reinterpret_cast<char*>(&sender_id_)) + sizeof(clock_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transaction_msg_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 sender_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sender_id(&has_bits);
          sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 recver_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_recver_id(&has_bits);
          recver_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float amt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_amt(&has_bits);
          amt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required uint32 clock = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_clock(&has_bits);
          clock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* transaction_msg_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transaction_msg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 sender_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sender_id(), target);
  }

  // required uint32 recver_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_recver_id(), target);
  }

  // required float amt = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_amt(), target);
  }

  // required uint32 clock = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_clock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transaction_msg_t)
  return target;
}

size_t transaction_msg_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:transaction_msg_t)
  size_t total_size = 0;

  if (_internal_has_sender_id()) {
    // required uint32 sender_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sender_id());
  }

  if (_internal_has_recver_id()) {
    // required uint32 recver_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_recver_id());
  }

  if (_internal_has_amt()) {
    // required float amt = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_clock()) {
    // required uint32 clock = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_clock());
  }

  return total_size;
}
size_t transaction_msg_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transaction_msg_t)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 sender_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sender_id());

    // required uint32 recver_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_recver_id());

    // required float amt = 3;
    total_size += 1 + 4;

    // required uint32 clock = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_clock());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void transaction_msg_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transaction_msg_t)
  GOOGLE_DCHECK_NE(&from, this);
  const transaction_msg_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<transaction_msg_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transaction_msg_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transaction_msg_t)
    MergeFrom(*source);
  }
}

void transaction_msg_t::MergeFrom(const transaction_msg_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transaction_msg_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      sender_id_ = from.sender_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      recver_id_ = from.recver_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      amt_ = from.amt_;
    }
    if (cached_has_bits & 0x00000008u) {
      clock_ = from.clock_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void transaction_msg_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transaction_msg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void transaction_msg_t::CopyFrom(const transaction_msg_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transaction_msg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transaction_msg_t::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void transaction_msg_t::InternalSwap(transaction_msg_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(transaction_msg_t, clock_)
      + sizeof(transaction_msg_t::clock_)
      - PROTOBUF_FIELD_OFFSET(transaction_msg_t, sender_id_)>(
          reinterpret_cast<char*>(&sender_id_),
          reinterpret_cast<char*>(&other->sender_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata transaction_msg_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void application_msg_t::InitAsDefaultInstance() {
}
class application_msg_t::_Internal {
 public:
  using HasBits = decltype(std::declval<application_msg_t>()._has_bits_);
  static void set_has_sender_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timetable_str(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

application_msg_t::application_msg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  log_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:application_msg_t)
}
application_msg_t::application_msg_t(const application_msg_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      log_(from.log_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timetable_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_timetable_str()) {
    timetable_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_timetable_str(),
      GetArena());
  }
  sender_id_ = from.sender_id_;
  // @@protoc_insertion_point(copy_constructor:application_msg_t)
}

void application_msg_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_application_msg_t_Msg_2eproto.base);
  timetable_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_id_ = 0;
}

application_msg_t::~application_msg_t() {
  // @@protoc_insertion_point(destructor:application_msg_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void application_msg_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  timetable_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void application_msg_t::ArenaDtor(void* object) {
  application_msg_t* _this = reinterpret_cast< application_msg_t* >(object);
  (void)_this;
}
void application_msg_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void application_msg_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const application_msg_t& application_msg_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_application_msg_t_Msg_2eproto.base);
  return *internal_default_instance();
}


void application_msg_t::Clear() {
// @@protoc_insertion_point(message_clear_start:application_msg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    timetable_str_.ClearNonDefaultToEmpty();
  }
  sender_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* application_msg_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 sender_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sender_id(&has_bits);
          sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string timetable_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_timetable_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "application_msg_t.timetable_str");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .transaction_msg_t log = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_log(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* application_msg_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:application_msg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sender_id(), target);
  }

  // required string timetable_str = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_timetable_str().data(), static_cast<int>(this->_internal_timetable_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "application_msg_t.timetable_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_timetable_str(), target);
  }

  // repeated .transaction_msg_t log = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_log_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_log(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:application_msg_t)
  return target;
}

size_t application_msg_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:application_msg_t)
  size_t total_size = 0;

  if (_internal_has_timetable_str()) {
    // required string timetable_str = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timetable_str());
  }

  if (_internal_has_sender_id()) {
    // required int32 sender_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sender_id());
  }

  return total_size;
}
size_t application_msg_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:application_msg_t)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string timetable_str = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timetable_str());

    // required int32 sender_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sender_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .transaction_msg_t log = 3;
  total_size += 1UL * this->_internal_log_size();
  for (const auto& msg : this->log_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void application_msg_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:application_msg_t)
  GOOGLE_DCHECK_NE(&from, this);
  const application_msg_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<application_msg_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:application_msg_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:application_msg_t)
    MergeFrom(*source);
  }
}

void application_msg_t::MergeFrom(const application_msg_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:application_msg_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  log_.MergeFrom(from.log_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_timetable_str(from._internal_timetable_str());
    }
    if (cached_has_bits & 0x00000002u) {
      sender_id_ = from.sender_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void application_msg_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:application_msg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void application_msg_t::CopyFrom(const application_msg_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:application_msg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool application_msg_t::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(log_)) return false;
  return true;
}

void application_msg_t::InternalSwap(application_msg_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  log_.InternalSwap(&other->log_);
  timetable_str_.Swap(&other->timetable_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(sender_id_, other->sender_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata application_msg_t::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::transaction_msg_t* Arena::CreateMaybeMessage< ::transaction_msg_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transaction_msg_t >(arena);
}
template<> PROTOBUF_NOINLINE ::application_msg_t* Arena::CreateMaybeMessage< ::application_msg_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::application_msg_t >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
